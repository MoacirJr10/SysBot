<#
    SYSBOT v3.2 - Sistema Avan√ßado de Manuten√ß√£o e Otimiza√ß√£o
    Script principal com menu interativo
    Atualizado para sincronizar com utils.ps1 melhorado
#>

# Configura√ß√µes iniciais
$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"
Set-StrictMode -Version Latest

# Caminho do m√≥dulo de utilidades
$utilsPath = Join-Path -Path $PSScriptRoot -ChildPath "utils.ps1"

# Importar m√≥dulo
if (Test-Path $utilsPath) {
    try {
        . $utilsPath
        Write-Verbose "M√≥dulo utils.ps1 carregado com sucesso" -Verbose
    } catch {
        Write-Host "‚ùå Erro ao carregar utils.ps1: $($_.Exception.Message)" -ForegroundColor Red
        exit 1
    }
} else {
    Write-Host "‚ùå Arquivo utils.ps1 n√£o encontrado." -ForegroundColor Red
    exit 1
}

function Show-MainMenu {
    [CmdletBinding()]
    param()

    Write-Header -Title "SYSBOT v3.2 TECH TOOL"

    Write-Host @"
======================== MENU PRINCIPAL ========================

 [1] üõ†Ô∏è  Manuten√ß√£o do Sistema
 [2] üíª Informa√ß√µes de Hardware
 [3] üåê Diagn√≥stico de Rede
 [4] üßπ Ferramentas de Limpeza
 [5] ‚öôÔ∏è  Otimiza√ß√£o Avan√ßada
 [6] üìä Relat√≥rios e Diagn√≥sticos

 [0] ‚ùå Sair do SysBot

===============================================================
"@ -ForegroundColor Cyan
}

function Show-MaintenanceMenu {
    [CmdletBinding()]
    param()

    Write-Host @"
=================== MANUTEN√á√ÉO DO SISTEMA ===================

 [1] üîÑ Verificar e instalar atualiza√ß√µes do Windows
 [2] üõ°Ô∏è  Verificar integridade do sistema (SFC)
 [3] üè• Restaurar sa√∫de do sistema (DISM)
 [4] üîç Verificar drivers desatualizados
 [5] üîÑ Atualizar programas (winget)
 [6] ‚è±Ô∏è  Agendar verifica√ß√£o de disco (CHKDSK)

 [9] ‚Ü© Voltar ao menu anterior
 [0] ‚ùå Sair

=============================================================
"@ -ForegroundColor Yellow
}

function Show-HardwareMenu {
    [CmdletBinding()]
    param()

    Write-Host @"
================ INFORMACOES DE HARDWARE ================

 [1] üíª Informa√ß√µes b√°sicas do sistema
 [2] üß† Detalhes da mem√≥ria RAM
 [3] üñ•Ô∏è  Informa√ß√µes da GPU
 [4] üíæ Status dos discos e armazenamento
 [5] üî• Temperaturas e ventila√ß√£o (se dispon√≠vel)
 [6] üì¶ Programas instalados

 [9] ‚Ü© Voltar ao menu anterior
 [0] ‚ùå Sair

=========================================================
"@ -ForegroundColor Yellow
}

function Show-NetworkMenu {
    [CmdletBinding()]
    param()

    Write-Host @"
================ DIAGN√ìSTICO DE REDE ================

 [1] üåê Configura√ß√£o de IP/DNS
 [2] üö¶ Testar conectividade b√°sica
 [3] üì∂ Testar velocidade da Internet
 [4] üîå Testar portas TCP
 [5] üßπ Liberar e renovar configura√ß√£o DHCP
 [6] üîç Analisar conex√µes ativas

 [9] ‚Ü© Voltar ao menu anterior
 [0] ‚ùå Sair

=====================================================
"@ -ForegroundColor Yellow
}

function Show-CleanupMenu {
    [CmdletBinding()]
    param()

    Write-Host @"
============== FERRAMENTAS DE LIMPEZA ==============

 [1] üóëÔ∏è  Limpeza b√°sica de arquivos tempor√°rios
 [2] üßº Limpeza avan√ßada com Storage Sense
 [3] üöÄ Limpar cache de pr√©-carregamento (Prefetch)
 [4] üñºÔ∏è  Limpar cache de thumbnails e √≠cones
 [5] üìã Limpar hist√≥rico de documentos recentes
 [6] üßπ Limpeza completa (todas as op√ß√µes)

 [9] ‚Ü© Voltar ao menu anterior
 [0] ‚ùå Sair

===================================================
"@ -ForegroundColor Yellow
}

function Show-OptimizationMenu {
    [CmdletBinding()]
    param()

    Write-Host @"
============== OTIMIZA√á√ÉO AVAN√áADA ==============

 [1] ‚ö° Otimizar unidades de disco
 [2] üåÄ Desfragmentar HDDs
 [3] ‚úÇÔ∏è  Executar TRIM em SSDs
 [4] üõ†Ô∏è  Ajustar configura√ß√µes de energia
 [5] üöÄ Desativar servi√ßos n√£o essenciais
 [6] üß™ Otimiza√ß√£o completa (todas as op√ß√µes)

 [9] ‚Ü© Voltar ao menu anterior
 [0] ‚ùå Sair

================================================
"@ -ForegroundColor Yellow
}

function Show-ReportsMenu {
    [CmdletBinding()]
    param()

    Write-Host @"
============ RELAT√ìRIOS E DIAGN√ìSTICOS ============

 [1] üìÑ Gerar relat√≥rio do sistema (HTML)
 [2] üìä Exportar lista de drivers (CSV)
 [3] üìã Exportar programas instalados (TXT)
 [4] üñ®Ô∏è  Salvar configura√ß√£o de rede
 [5] üì¶ Criar dump completo do sistema
 [6] üîç Analisar integridade do sistema

 [9] ‚Ü© Voltar ao menu anterior
 [0] ‚ùå Sair

==================================================
"@ -ForegroundColor Yellow
}

# Loop principal
do {
    try {
        Show-MainMenu
        $mainChoice = Read-Host "`nDigite sua op√ß√£o"

        switch ($mainChoice) {
            "1" { # Manuten√ß√£o do Sistema
                do {
                    Show-MaintenanceMenu
                    $subChoice = Read-Host "`nDigite sua op√ß√£o"

                    switch ($subChoice) {
                        "1" { Verificar-Atualizacoes -InstallUpdates }
                        "2" {
                            Write-Host "`n[üõ†Ô∏è] Verificando integridade do sistema..." -ForegroundColor Magenta
                            sfc /scannow
                        }
                        "3" {
                            Write-Host "`n[üè•] Restaurando sa√∫de do sistema..." -ForegroundColor Magenta
                            DISM /Online /Cleanup-Image /RestoreHealth
                        }
                        "4" { Verificar-Drivers -CheckUpdates }
                        "5" {
                            Write-Host "`n[üîÑ] Atualizando programas via winget..." -ForegroundColor Magenta
                            winget upgrade --all --accept-package-agreements --accept-source-agreements
                        }
                        "6" { Verificar-Disco }
                        "9" { break }
                        "0" { exit }
                        default { Write-Host "‚ùå Op√ß√£o inv√°lida" -ForegroundColor Red }
                    }

                    if ($subChoice -notin "0","9") { Pausar }
                } while ($true)
            }

            "2" { # Informa√ß√µes de Hardware
                do {
                    Show-HardwareMenu
                    $subChoice = Read-Host "`nDigite sua op√ß√£o"

                    switch ($subChoice) {
                        "1" {
                            systeminfo | Select-String -Pattern "Nome do SO","Vers√£o","Fabricante","Modelo","Processador","Mem√≥ria"
                        }
                        "2" { Verificar-MemoriaRAM -Detailed }
                        "3" {
                            Get-CimInstance Win32_VideoController |
                                    Select-Object Name, DriverVersion, @{Name='VRAM(MB)';Expression={$_.AdapterRAM/1MB}} |
                                    Format-Table -AutoSize
                        }
                        "4" {
                            Get-PhysicalDisk | Format-Table -AutoSize
                            Get-Volume | Where-Object { $_.DriveType -eq 'Fixed' } |
                                    Select-Object DriveLetter, FileSystemLabel,
                                    @{Name='SizeGB';Expression={[math]::Round($_.Size/1GB,2)}},
                                    @{Name='FreeGB';Expression={[math]::Round($_.SizeRemaining/1GB,2)}} |
                                    Format-Table -AutoSize
                        }
                        "5" {
                            Get-CimInstance -ClassName Win32_TemperatureProbe -ErrorAction SilentlyContinue |
                                    Select-Object Name, CurrentTemperature | Format-Table -AutoSize
                            Get-CimInstance -ClassName Win32_Fan -ErrorAction SilentlyContinue |
                                    Select-Object Name, Status | Format-Table -AutoSize
                        }
                        "6" {
                            Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*,
                            HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* |
                                    Where-Object { $_.DisplayName } |
                                    Select-Object DisplayName, DisplayVersion, Publisher, InstallDate |
                                    Sort-Object DisplayName |
                                    Format-Table -AutoSize | Out-Host -Paging
                        }
                        "9" { break }
                        "0" { exit }
                        default { Write-Host "‚ùå Op√ß√£o inv√°lida" -ForegroundColor Red }
                    }

                    if ($subChoice -notin "0","9") { Pausar }
                } while ($true)
            }

            "3" { # Diagn√≥stico de Rede
                do {
                    Show-NetworkMenu
                    $subChoice = Read-Host "`nDigite sua op√ß√£o"

                    switch ($subChoice) {
                        "1" {
                            ipconfig /all | Select-String -Pattern "IPv4","Gateway","Servidores DNS"
                            Get-NetIPConfiguration | Format-Table -AutoSize
                        }
                        "2" {
                            Test-Connection -ComputerName "google.com" -Count 4
                            Test-NetConnection -ComputerName "google.com" -Port 80 -InformationLevel Detailed
                        }
                        "3" { Testar-VelocidadeInternet }
                        "4" {
                            $hostname = Read-Host "Digite o host ou IP"
                            $port = Read-Host "Digite a porta"
                            Test-NetConnection -ComputerName $hostname -Port $port
                        }
                        "5" {
                            ipconfig /flushdns
                            ipconfig /release
                            ipconfig /renew
                        }
                        "6" {
                            Get-NetTCPConnection -State Established |
                                    Select-Object LocalAddress, LocalPort, RemoteAddress, RemotePort, State, OwningProcess |
                                    Sort-Object OwningProcess |
                                    Format-Table -AutoSize
                        }
                        "9" { break }
                        "0" { exit }
                        default { Write-Host "‚ùå Op√ß√£o inv√°lida" -ForegroundColor Red }
                    }

                    if ($subChoice -notin "0","9") { Pausar }
                } while ($true)
            }

            "4" { # Ferramentas de Limpeza
                do {
                    Show-CleanupMenu
                    $subChoice = Read-Host "`nDigite sua op√ß√£o"

                    switch ($subChoice) {
                        "1" { Limpeza-Avancada -IncludeTempFiles }
                        "2" { Start-Process "ms-settings:storagesense" }
                        "3" { Limpeza-Avancada -IncludePrefetch }
                        "4" { Limpeza-Avancada -IncludeThumbnails }
                        "5" { Limpeza-Avancada -IncludeRecentFiles }
                        "6" { Limpeza-Avancada -IncludeTempFiles -IncludeThumbnails -IncludePrefetch -IncludeLogs }
                        "9" { break }
                        "0" { exit }
                        default { Write-Host "‚ùå Op√ß√£o inv√°lida" -ForegroundColor Red }
                    }

                    if ($subChoice -notin "0","9") { Pausar }
                } while ($true)
            }

            "5" { # Otimiza√ß√£o Avan√ßada
                do {
                    Show-OptimizationMenu
                    $subChoice = Read-Host "`nDigite sua op√ß√£o"

                    switch ($subChoice) {
                        "1" { Otimizacao-Sistema -OptimizeDrives }
                        "2" { Otimizacao-Sistema -Defrag }
                        "3" { Otimizacao-Sistema -TrimSSD }
                        "4" {
                            powercfg /list
                            powercfg /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c  # Alto desempenho
                        }
                        "5" {
                            # Exemplo seguro - n√£o desativa servi√ßos cr√≠ticos
                            Get-Service | Where-Object { $_.StartType -eq "Automatic" -and $_.Status -eq "Stopped" } |
                                    Select-Object Name, DisplayName | Format-Table -AutoSize
                        }
                        "6" { Otimizacao-Sistema -OptimizeDrives -Defrag -TrimSSD }
                        "9" { break }
                        "0" { exit }
                        default { Write-Host "‚ùå Op√ß√£o inv√°lida" -ForegroundColor Red }
                    }

                    if ($subChoice -notin "0","9") { Pausar }
                } while ($true)
            }

            "6" { # Relat√≥rios e Diagn√≥sticos
                do {
                    Show-ReportsMenu
                    $subChoice = Read-Host "`nDigite sua op√ß√£o"

                    switch ($subChoice) {
                        "1" { Criar-Relatorio }
                        "2" { Verificar-Drivers -ExportList }
                        "3" {
                            $date = Get-Date -Format "yyyy-MM-dd"
                            $file = "$env:USERPROFILE\Desktop\Programas_Instalados_$date.txt"
                            Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*,
                            HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* |
                                    Where-Object { $_.DisplayName } |
                                    Select-Object DisplayName, DisplayVersion, Publisher, InstallDate |
                                    Sort-Object DisplayName |
                                    Out-File $file -Encoding UTF8
                            Write-Host "Lista salva em: $file" -ForegroundColor Green
                        }
                        "4" {
                            $date = Get-Date -Format "yyyy-MM-dd"
                            $file = "$env:USERPROFILE\Desktop\Configuracao_Rede_$date.txt"
                            ipconfig /all | Out-File $file
                            Get-NetIPConfiguration | Out-File $file -Append
                            Write-Host "Configura√ß√£o salva em: $file" -ForegroundColor Green
                        }
                        "5" {
                            $date = Get-Date -Format "yyyy-MM-dd_HH-mm"
                            $folder = "$env:USERPROFILE\Desktop\SysBot_Dump_$date"
                            New-Item -ItemType Directory -Path $folder | Out-Null

                            systeminfo > "$folder\systeminfo.txt"
                            Get-CimInstance Win32_ComputerSystem > "$folder\computer.txt"
                            Get-Process | Sort-Object CPU -Descending > "$folder\processes.txt"
                            Get-Service | Where-Object { $_.Status -ne "Running" } > "$folder\services.txt"

                            Write-Host "Dump completo salvo em: $folder" -ForegroundColor Green
                        }
                        "6" {
                            # Verifica√ß√£o avan√ßada de integridade
                            Write-Host "`n[üîç] Verificando integridade do sistema..." -ForegroundColor Magenta
                            $results = @()

                            # Verificar SFC
                            try {
                                $sfc = sfc /verifyonly
                                $results += "SFC: $(if ($LASTEXITCODE -eq 0) {'OK'} else {'Problemas encontrados'})"
                            } catch {
                                $results += "SFC: Erro na verifica√ß√£o"
                            }

                            # Verificar DISM
                            try {
                                $dism = DISM /Online /Cleanup-Image /ScanHealth
                                $results += "DISM: $(if ($dism -match 'nenhuma corrup√ß√£o') {'OK'} else {'Problemas encontrados'})"
                            } catch {
                                $results += "DISM: Erro na verifica√ß√£o"
                            }

                            # Exibir resultados
                            $results | ForEach-Object { Write-Host $_ }
                        }
                        "9" { break }
                        "0" { exit }
                        default { Write-Host "‚ùå Op√ß√£o inv√°lida" -ForegroundColor Red }
                    }

                    if ($subChoice -notin "0","9") { Pausar }
                } while ($true)
            }

            "0" {
                Write-Host "`nüëã Encerrando SysBot. At√© logo!" -ForegroundColor Green
                exit
            }

            default {
                Write-Host "`n‚ùå Op√ß√£o inv√°lida. Tente novamente." -ForegroundColor Red
                Pausar
            }
        }
    } catch {
        Write-Host "`n‚ùå Ocorreu um erro: $($_.Exception.Message)" -ForegroundColor Red
        Write-Host "Local: $($_.InvocationInfo.ScriptName)" -ForegroundColor Red
        Write-Host "Linha: $($_.InvocationInfo.ScriptLineNumber)" -ForegroundColor Red
        Pausar
    }
} while ($true)